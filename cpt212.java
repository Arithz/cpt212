import radix.Radix;
import radix.RadixWholeNumber;

import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;

public class cpt212{
    public static void main(String[] args){

        int[] wholeArr = {45, 102, 17, 309, 76, 50, 204, 0, 93, 500, 1, 2, 3, 4, 5, 6, 7};

        float[] decimalArr = {3.1415f, 2.7183f, 1.6180f, 0.6931f, 0.5772f, 1.4142f, 0.7071f, 1.7321f, 
            0.3010f, 09550f, 1.5708f, 2.3026f, 2.7182f, 3.1416f, 123.4567f, 4567f, 455f};

        // RadixWholeNumber radixInteger = new RadixWholeNumber();
        // int[] sortedDecimals = radixInteger.setArr(wholeArr); 
        // int[] sorterWholeNumbers = radixInteger.radixSort();
        // System.out.println("Integer Finalized Sorted array: " + Arrays.toString(sorterWholeNumbers));

        System.out.println("--------------------------------------------------");

        Radix radixFloat = new Radix();
        // float[] sortedDecimals = radixFloat.setArr(decimalArr); 
        // float[] sortedDecimals = radixFloat.radixSort(); 
        // System.out.println("Floating Finalized Sorted array: " + Arrays.toString(sortedDecimals));
        
        // writeDataset(); //uncomment if want to rewrite dataset.
    }

    public static void writeDataset(){

        int[] intArr = {911,580,489,616,294,387,12,532,411,406,643,629,841,762,821,792,510,178,460,950,649,975,850,283,590,870,92,978,249,754,396,542,336,823,345,88,876,221,758,328,432,581,83,472,459,692,376,668,623,833,756,68,536,207,931,154,289,269,782,471,355,731,253,492,958,419,755,944,707,216,127,566,412,800,691,909,275,969,357,520,286,925,798,551,536,7,669,603,339,2,489,413,498,363,322,793,794,373,602,107,803,500,503,441,407,33,65,525,997,312,871,455,182,776,464,174,980,372,834,759,890,787,246,518,941,391,418,49,800,755,524,454,301,63,818,84,278,821,710,304,452,751,983,31,179,919,455,943,331,693,828,604,172,335,596,953,113,678,927,10,428,551,114,927,545,385,781,956,314,677,301,296,736,811,4,211,16,64,617,326,402,505,36,489,244,882,970,134,879,522,223,654,433,753,366,890,428,309,356,492,92,751,183,543,616,955,34,566,228,323,514,738,809,495,433,903,986,965,323,773,67,222,329,509,927,708,369,745,972,174,488,986,602,731,141,250,174,268,752,731,330,675,247,280,689,745,430,485,338,464,16,175,240,886,837,240,686,709,254,787,169,183,83,742,614,5,398,212,712,401,452,105,248,688,526,721,663,237,981,296,802,875,952,788,725,503,69,473,705,841,391,319,68,34,232,455,292,64,883,479,897,755,339,811,997,490,992,735,41,603,937,331,176,849,961,1,880,247,496,875,3,77,834,8,110,795,692,862,69,161,733,289,163,921,65,895,615,983,788,387,292,127,643,289,553,970,429,189,627,48,398,486,681,620,21,498,716,27,612,627,757,220,55,232,360,370,518,783,340,321,381,865,749,995,794,588,560,790,185,14,219,402,783,294,224,502,714,270,125,166,511,488,923,991,935,676,652,389,866,982,45,623,630,470,577,795,539,629,856,108,635,972,270,432,552,66,60,423,201,752,478,143,503,643,503,458,693,443,671,269,847,41,915,947,111,846,979,272,830,320,870,506,145,188,25,210,911,428,365,852,740,678,158,262,779,397,669,496,399,727,907,746,303,744,378,506,689,472,664,322,27,833,799,130,674,469,887,309,39,192,115,365,254,702,374,327,331,48,952,777,624,270,369,691,977,576,288,141,333,391,552,251,749,631,849,719,660,597,192,628,3,939,399,247,280,255,3,20,932,33,605,931,455,782,477,42,549,419,355,39,196,199,743,270,979,724,724,893,151,880,231,445,919,841,967,331,164,656,669,520,361,320,223,948,748,618,210,998,929,509,823,703,929,279,725,248,413,194,378,681,192,949,526,738,372,747,41,94,507,474,86,385,884,46,613,841,644,697,514,456,793,640,403,173,255,287,835,713,65,957,1,302,455,805,354,745,80,511,367,5,861,136,646,678,975,409,910,548,319,676,943,700,376,618,455,493,792,888,974,105,119,781,265,203,126,117,522,780,806,568,525,115,676,789,248,338,303,814,947,92,2,374,561,337,514,963,415,433,123,738,566,273,31,554,817,337,39,771,390,292,526,763,478,904,496,410,395,812,952,260,870,988,225,444,93,488,927,869,479,458,115,725,773,227,884,797,20,694,55,669,147,184,845,435,386,377,407,166,522,927,901,984,9,900,339,295,322,227,766,401,531,948,494,448,954,143,986,434,950,88,702,771,333,371,657,742,654,408,729,26,590,18,752,351,996,547,270,267,742,266,402,953,325,667,664,958,378,609,727,808,637,184,55,401,619,599,65,240,244,330,967,616,918,302,707,996,132,863,525,52,454,899,461,952,918,484,778,740,186,128,677,945,558,785,870,787,824,503,545,715,224,789,5,338,271,504,795,217,5,401,456,368,315,183,121,810,345,341,63,947,604,869,944,74,380,361,970,867,195,926,360,258,582,830,552,723,201,738,352,616,360,994,764,879,341,384,645,133,554,474,384,892,403,668,773,393,955,831,877,327,927,477,223,598,272,247,840,45,627,626,744,989,215,656,262,372,353,660,178,167,587,883,75,776,612,279,398,82,559,598,696,910,942,348,218,680,528,175,566,178,677,678,350,470,231,749,882,179,879,4,782,511,8,50,0,676,479,873,148,576,391,829,248,954,911,379,959,492,416,936,96,712,773,917,786,921,329,378,931,847,300,427,728,64,585,911,883,781,684,794,794,74,312,988,455,196,528,365,10,147,640,135,904,308,969,754,381,572,558,61,604,63,255,402,37,234,221,74,873,878,801,555,157,313,840,618,976,817,35,626,544,209,595,1,270,311,537,117,911,919};
        float[] floatArr = {226.05f,954.46f,677.06f,679.99f,229.5f,441.91f,891.48f,171.6f,964.45f,911.53f,970.18f,308.52f,74.01f,802.48f,41.88f,122.8f,623.66f,138.28f,427.94f,171.9f,761.39f,710.61f,308.12f,528.66f,324.24f,76.12f,842.3f,321.96f,197.07f,886.43f,622.12f,248.31f,534.34f,442.52f,509.55f,409.52f,557.31f,541.42f,124.57f,961.4f,591.03f,338.9f,762.64f,176.42f,631.98f,485.67f,504.89f,845.87f,276.93f,802.4f,866.3f,972.19f,338.68f,443.05f,553.08f,351.76f,970.39f,328.71f,506.75f,470.24f,87.9f,564.7f,147.74f,478.29f,307.6f,122.98f,938.13f,767.76f,866.91f,0.97f,262.06f,787.93f,183.83f,817.3f,305.16f,611.84f,721.08f,78.74f,37.52f,731.44f,476.32f,434.47f,668.44f,149.36f,871.32f,401.83f,153.85f,846.18f,625.88f,170.19f,292.32f,741.94f,602.11f,370.11f,587.44f,979.86f,894.69f,809.39f,424.02f,441.3f,719.23f,644.57f,183.53f,46.76f,376.1f,477.28f,26.37f,541.81f,979.81f,889.79f,856.96f,562.7f,359.81f,227.77f,828.33f,256.06f,274.57f,60.62f,967.23f,190.0f,930.23f,176.42f,413.27f,290.23f,365.86f,820.36f,47.72f,980.92f,520.18f,934.64f,134.93f,986.53f,604.26f,420.46f,77.32f,121.64f,539.38f,934.43f,280.12f,157.5f,586.25f,587.86f,74.23f,549.24f,86.37f,153.82f,350.6f,811.11f,959.83f,774.94f,190.31f,95.49f,555.86f,523.6f,483.94f,887.19f,929.81f,336.62f,626.56f,63.18f,379.52f,312.45f,366.74f,784.09f,481.89f,31.54f,185.93f,456.26f,909.57f,268.8f,352.34f,677.21f,174.34f,421.03f,164.37f,794.9f,106.81f,866.91f,423.5f,652.03f,982.53f,134.44f,951.93f,469.97f,144.53f,12.64f,710.64f,373.62f,926.44f,760.78f,291.87f,179.56f,350.36f,166.25f,656.92f,991.32f,201.2f,899.67f,850.26f,442.77f,117.6f,380.0f,270.83f,7.23f,20.02f,464.16f,144.91f,411.77f,845.45f,527.67f,610.65f,778.03f,304.4f,555.89f,742.2f,161.02f,22.79f,587.16f,537.71f,699.22f,660.2f,619.74f,676.07f,43.68f,510.48f,133.7f,560.51f,424.37f,84.0f,194.47f,271.15f,425.26f,374.52f,80.53f,240.16f,246.1f,177.3f,620.06f,695.49f,654.45f,983.57f,264.73f,975.72f,989.36f,876.29f,131.01f,271.51f,773.21f,209.76f,987.1f,80.94f,296.57f,512.06f,332.61f,344.8f,725.96f,633.62f,272.06f,863.44f,254.17f,826.72f,331.09f,497.99f,374.07f,332.38f,730.05f,162.02f,151.01f,912.94f,803.55f,97.38f,378.22f,899.66f,429.51f,295.39f,543.55f,962.64f,125.96f,78.61f,647.93f,220.14f,945.12f,675.66f,229.97f,909.5f,923.42f,538.88f,339.76f,923.13f,297.11f,944.27f,313.31f,768.57f,388.79f,928.89f,76.29f,722.15f,860.26f,71.65f,241.0f,216.37f,417.45f,628.59f,240.86f,637.38f,997.89f,333.85f,267.96f,349.09f,2.07f,121.71f,881.93f,188.49f,307.69f,920.67f,205.19f,765.84f,690.09f,697.0f,779.65f,581.09f,53.12f,239.36f,934.69f,379.01f,78.49f,345.45f,77.1f,171.85f,283.53f,229.0f,51.51f,711.61f,366.86f,529.17f,870.3f,749.72f,828.16f,569.28f,348.76f,147.71f,763.02f,71.62f,933.57f,499.61f,786.5f,354.29f,144.81f,496.37f,445.16f,162.05f,748.31f,393.93f,398.55f,472.68f,77.97f,302.58f,160.19f,53.8f,748.7f,492.04f,282.25f,558.82f,498.0f,747.07f,688.49f,11.12f,967.06f,386.16f,398.5f,712.56f,617.73f,162.9f,217.92f,34.52f,712.29f,809.22f,602.12f,447.44f,914.21f,619.97f,982.06f,42.47f,265.03f,286.42f,343.99f,78.27f,151.52f,468.66f,100.19f,816.47f,688.34f,305.94f,512.43f,575.81f,26.96f,364.81f,594.42f,650.69f,145.01f,415.36f,558.8f,114.17f,537.56f,467.44f,659.04f,399.04f,458.2f,71.15f,180.57f,536.21f,929.17f,316.49f,630.56f,761.76f,783.33f,296.08f,319.73f,119.8f,553.65f,602.25f,449.14f,27.68f,508.72f,46.48f,659.68f,596.11f,203.92f,598.01f,651.04f,528.83f,930.89f,46.58f,85.62f,267.45f,11.63f,335.05f,436.37f,520.73f,188.81f,415.47f,137.53f,837.48f,788.1f,692.5f,536.92f,612.02f,341.72f,855.21f,410.75f,822.2f,326.46f,662.95f,173.78f,578.06f,663.13f,721.93f,61.25f,710.37f,282.31f,582.07f,962.06f,866.32f,395.6f,913.76f,113.17f,350.76f,915.83f,467.33f,944.29f,147.67f,716.17f,593.37f,15.25f,285.43f,605.68f,871.25f,941.55f,577.22f,640.51f,975.14f,34.33f,621.41f,884.72f,313.23f,701.75f,102.05f,341.78f,220.83f,279.72f,363.0f,971.2f,52.95f,313.48f,364.54f,25.68f,56.52f,823.82f,942.85f,937.25f,809.12f,283.85f,857.88f,865.15f,19.27f,910.81f,395.73f,129.84f,94.07f,245.18f,946.43f,779.22f,898.88f,234.18f,309.53f,997.57f,455.18f,615.3f,789.91f,219.75f,766.13f,122.48f,871.58f,914.71f,43.8f,292.25f,534.72f,394.42f,295.72f,615.4f,954.16f,575.32f,217.77f,622.32f,476.88f,144.96f,308.69f,71.12f,12.22f,471.91f,848.77f,301.95f,241.79f,475.64f,405.97f,862.82f,571.3f,229.81f,79.76f,618.24f,713.16f,337.99f,937.16f,898.67f,626.87f,9.53f,752.93f,346.38f,822.06f,516.15f,653.35f,46.77f,223.12f,756.69f,895.2f,19.33f,578.39f,749.92f,747.97f,256.87f,722.54f,320.42f,741.7f,967.74f,444.98f,855.12f,449.91f,145.12f,9.86f,752.64f,119.86f,427.08f,623.45f,262.86f,679.77f,405.7f,268.75f,490.27f,569.09f,488.3f,283.31f,899.22f,142.35f,149.37f,212.58f,713.37f,600.74f,20.58f,553.4f,670.38f,952.62f,687.65f,276.8f,349.41f,344.13f,57.27f,911.14f,699.51f,15.82f,31.18f,810.72f,551.53f,68.35f,135.91f,662.36f,679.12f,380.98f,6.65f,161.33f,90.86f,446.94f,673.04f,614.07f,680.35f,321.89f,34.31f,237.9f,264.67f,602.35f,747.76f,455.41f,74.76f,327.66f,304.0f,626.72f,535.51f,110.8f,388.29f,607.32f,171.42f,475.04f,452.36f,930.39f,596.38f,307.33f,822.53f,795.24f,619.0f,731.39f,353.77f,568.27f,83.19f,224.96f,576.95f,286.57f,626.05f,419.99f,73.41f,576.86f,795.89f,519.99f,129.23f,454.29f,922.46f,139.7f,394.23f,516.7f,173.82f,551.58f,656.33f,208.85f,509.18f,661.52f,948.89f,929.77f,918.91f,143.37f,909.98f,578.83f,932.81f,595.56f,756.6f,638.64f,354.74f,299.19f,558.06f,81.44f,412.55f,93.55f,676.85f,463.9f,446.51f,83.93f,234.77f,382.64f,436.07f,191.56f,911.95f,190.86f,553.49f,786.96f,446.11f,696.62f,158.12f,154.5f,824.35f,540.49f,339.21f,831.81f,739.38f,69.79f,913.14f,615.49f,854.55f,424.15f,589.14f,343.46f,492.66f,434.59f,663.45f,983.11f,379.83f,406.68f,530.51f,782.59f,130.33f,751.0f,338.29f,370.97f,526.43f,418.24f,103.29f,269.59f,380.41f,980.17f,23.95f,533.3f,729.16f,971.54f,137.28f,325.62f,999.25f,742.62f,991.26f,226.09f,190.34f,283.41f,607.46f,946.29f,266.64f,853.76f,719.69f,497.05f,376.69f,858.91f,729.01f,863.01f,504.96f,168.0f,173.17f,394.21f,156.57f,833.08f,393.72f,345.74f,254.9f,598.9f,25.74f,352.54f,844.14f,939.82f,298.55f,899.1f,204.94f,921.61f,737.35f,732.34f,936.57f,350.73f,497.48f,431.34f,726.33f,331.59f,383.64f,305.95f,32.79f,626.49f,201.81f,599.21f,189.27f,464.07f,813.37f,701.69f,960.16f,710.81f,329.85f,674.45f,93.47f,962.33f,559.02f,77.25f,745.72f,258.21f,61.92f,651.16f,953.31f,896.1f,998.15f,488.96f,675.74f,385.3f,932.62f,657.81f,120.52f,381.88f,881.59f,536.17f,335.53f,692.93f,520.07f,178.74f,788.17f,196.76f,867.64f,312.3f,733.05f,377.65f,238.83f,403.08f,621.73f,176.96f,890.59f,673.72f,610.57f,238.89f,359.42f,598.71f,440.44f,332.06f,244.05f,253.97f,846.46f,625.52f,393.48f,196.42f,8.15f,187.48f,858.69f,661.43f,731.02f,91.38f,92.58f,172.61f,278.05f,41.34f,22.99f,404.11f,61.56f,539.82f,969.58f,850.03f,144.04f,933.65f,493.88f,366.06f,339.75f,172.29f,484.5f,715.97f,388.39f,466.53f,945.75f,174.97f,328.33f,568.41f,386.6f,332.55f,436.34f,301.12f,951.17f,186.46f,130.37f,244.42f,570.57f,325.26f,375.23f,656.05f,468.98f,657.1f,833.19f,874.31f,21.19f,774.69f,839.17f,738.39f,767.9f,216.41f,75.98f,723.59f,476.84f,503.74f,454.92f,610.12f,611.76f,39.62f,773.06f,258.97f,421.65f,10.01f,928.03f,538.68f,505.48f,32.04f,469.94f,557.4f,615.47f,754.56f,750.52f,495.31f,943.28f,727.46f,746.89f,380.68f,863.04f,648.35f,211.3f,105.45f,600.08f,57.23f,337.91f,957.47f,553.64f,860.27f,797.95f,470.31f,475.78f,820.97f,182.85f,220.58f,929.99f,69.28f,3.44f,397.07f,281.44f,495.93f,514.91f,466.73f,901.38f,507.52f,265.44f,999.97f,676.57f,883.38f,130.08f,954.24f,972.38f,864.28f,938.09f,440.14f,883.41f,958.96f,303.08f,64.58f,813.55f,584.88f,672.75f,813.73f,572.02f,777.75f,233.82f,847.4f,217.16f,220.61f,903.39f,328.94f,561.45f,134.55f,994.27f,715.52f,176.47f,983.0f,455.56f,467.75f,343.76f,548.95f,938.66f,979.5f,321.47f,301.39f,448.01f,204.98f,759.74f,939.13f,676.69f,142.4f,82.38f,144.83f,711.32f,651.37f,120.35f};

        // Create dataset for plotting
        try{
            FileWriter writerInteger = new FileWriter("result.csv");

            // make two columns one is number of operations and one is length of array make it into a csv
            writerInteger.write("Number of operations,Length of array\n");

            RadixWholeNumber radixInteger = new RadixWholeNumber();

            int[] sortedInteger;

            for(int i =1; i<11; i++) {
                // use array copy to get only 100 numbers from the testarr array
                int n = i*100;
                int[] newArr = Arrays.copyOfRange(intArr, 0, n);
                radixInteger.setArr(newArr);
                sortedInteger = radixInteger.radixSort();
                writerInteger.write(radixInteger.getCounter() + "," + sortedInteger.length + "\n");
            }

            writerInteger.close();

            FileWriter writerFloat = new FileWriter("resultFloat.csv");
            
            // make two columns one is number of operations and one is length of array make it into a csv
            writerFloat.write("Number of operations,Length of array\n");

            Radix radixFloat = new Radix();

            float[] sortedFloat;

            for(int i =1; i<11; i++) {
                // use array copy to get only 100 numbers from the testarr array
                int n = i*100;
                float[] newArr = Arrays.copyOfRange(floatArr, 0, n);
                radixFloat.setArr(newArr);
                sortedFloat = radixFloat.radixSort();
                writerFloat.write(radixFloat.getCounter() + "," + sortedFloat.length + "\n");
            }

            writerFloat.close();
        }catch(IOException e){
        }
    }
} 
 